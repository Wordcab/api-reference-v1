openapi: 3.1.0
info:
  version: 1.0.0
  title: Wordcab API
  description: >
    # Overview
    Summarize business communications at scale with Wordcab's API. To access the reference for our legacy API,
    [please head here](https://wordcab.com/api-reference/).
    ## API Key
    To authenticate your request, either add `Authorization: Bearer <apikey>` to your header, or include the `apikey` 
    as one of the query parameters. It's highly recommended you use the `Authorization` header. If you don’t have an 
    API key, you can head over to the [Signup](https://wordcab.com/signup/) page to sign up for a Free Plan. Afterwards 
    you’ll be redirected to your [Dashboard](https://wordcab.com/existing-summaries/). From there, head to your 
    [Account](https://wordcab.com/account/details/) page, and click the API Key tab.
    ## Postman Collection
    [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/11291760-6a87b562-531a-4394-a1b3-a5137066deaa?action=collection%2Ffork&collection-url=entityId%3D11291760-6a87b562-531a-4394-a1b3-a5137066deaa%26entityType%3Dcollection%26workspaceId%3D38faea26-9850-4351-be7e-0764297a460a)
    ## Webhook Portal
    Wordcab partners with [Svix](https://svix.com) to provide users with a best-in-class webhook experience. You can 
    find a link to your Webhook Portal on your [Account](https://wordcab.com/account/webhook-portal/) page. 
    With the Portal, you'll be able to register your webhook endpoints and get notified when certain events 
    (like a summary being finished) occur. For best security practices, please see 
    [this Svix guide](https://docs.svix.com/receiving/verifying-payloads/how) on verifying incoming webhooks in your backend. 
    ## Base URL
    `https://wordcab.com/api/v1`
servers:
  - url: https://wordcab.com/api/v1
security:
  - bearerAuth: []
  - apiKeyAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
    apiKeyAuth:
      type: apiKey
      in: query
      name: apikey
  schemas:
    jsonBody:
      type: object
      properties:
        transcript:
          type: array
          description: |
            The format for a JSON transcript is an array of strings that each include a **speaker label**  followed by a **colon**, then a **space** and the **utterance** (what that speaker actually said). You can add an optional timestamp (formatted as in the example below) for every array item. `source` must be set to `generic`.
            ```
            {
              "transcript": [
                "[00:01:23 --> 00:01:25] Joe: This is an example of a generic transcript.",
                "[00:01:26 --> 00:01:27] Jill: Oh wow!"
              ]
            }
            ```
          items:
            type: string
      example:
        {
          "transcript": [
            "[00:01:23 --> 00:01:25] Joe: This is an example of a generic transcript.",
            "[00:01:26 --> 00:01:27] Jill: Oh wow!"
          ]
        }
    textBody:
      type: string
      description: >
        If `source` is set to `vtt`, you can use raw vtt text in the request body. Make sure your vtt is 
        formatted correctly (you can use [this validator](https://quuz.org/webvtt/)).
    BaseSummary:
      type: object
      description: Base Summary
      properties:
        job_status:
          type: string
          description: |
            The `status` of the associated job.
            * `Pending` - The job object has been created and is about to be queued
            * `ItemQueued` - The job has been queued
            * `Transcribing` - The input is being transcribed
            * `PreparingTranscript` - The transcript if being finalized
            * `TranscriptComplete` - The transcript is ready
            * `Summarizing` - The transcript is being summarized
            * `PreparingSummary` - The summary if being finalized
            * `SummaryComplete` - The summary is ready
            * `Deleted` - The job and its associated transcript and summaries has been deleted
            * `Error` - The job encountered an error
          enum: [ Pending, ItemQueued, Transcribing, PreparingTranscript, TranscriptComplete, Summarizing,
                  PreparingSummary, SummaryComplete, Deleted, Error ]
        job_name:
          type: string
          description: The `job_name` of the associated job.
        summary_id:
          type: string
          description: The id of the summary object.
        transcript_id:
          type: string
          description: The id of the associated transcript.
        summary_type:
          type: string
          enum: [ narrative, short ]
        speaker_map:
          type: object
          patternProperties:
            '^[A-Z]$':
              type: string
              pattern: '^[A-Z]$'
              description: >
                The key can be any letter `A` through `Z`. The value is the assigned speaker label, which defaults to 
                **SPEAKER [A-Z]** (for example, 'SPEAKER B').
        source:
          type: string
          description: The `source` that was set during the associated job's creation.
          enum: [ generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, otter, fireflies, sonix, descript ]
    NarrativeSummary:
      allOf:
        - $ref: '#/components/schemas/BaseSummary'
        - type: object
          properties:
            summary:
              type: object
              description: >
                A narrative-style summary split into individual 'bullets', with each bullet having a corresponding 
                transcript object.
              properties:
                '^[1-5]$':
                  type: object
                  pattern: '^[1-5]$'
                  description: >
                    The key is a number from `1` through `5`, represented as a **string** (for example, '3').
                    Each number represents the level of detail of the corresponding summary. `1` Would be the 
                    shortest summary, and `5` the longest. Each Narrative Summary has one or more summary objects,
                    based on the `summary_lens` that were set during job creation. For example if `summary_lens`
                    was set to '1,3,5', there would be three summary objects in `summary`, with keys '1', '3', and '5'.
                  properties:
                    structured_summary:
                      type: array
                      items:
                        type: object
                        properties:
                          summary:
                            type: string
                            description: >
                              A summary 'bullet', part of one or more bullets composing the Narrative Summary for a 
                              particular summary length.
                          start_timestamp:
                            type: integer
                            description: >
                              The timestamp of the moment the summary began, in **milliseconds**, with 0 being the start
                              of the conversation. Only present if timestamps were included in the transcript that was
                              used for the job, or if the job input was an audio file.
                          end_timestamp:
                            type: integer
                            description: >
                              The timestamp of the moment the summary ended, in **milliseconds**, with 0 being the start
                              of the conversation. Only present if timestamps were included in the transcript that was
                              used for the associated job, or if the job input was an audio file.
                          start_time:
                            type: string
                            description: >
                              The start time of the summary, in human-readable format: **00:01:23**. Only present if 
                              timestamps were included in the transcript that was used for the associated job, 
                              or if the job input was an audio file.
                          end_time:
                            type: string
                            description: >
                              The end time of the summary, in human-readable format: **00:04:56**. Only present if 
                              timestamps were included in the transcript that was used for the associated job, 
                              or if the job input was an audio file.
                          start_index:
                            type: integer
                            description: >
                              The start index of the `text`, with 0 being the start of the start of the transcript.
                              This is used in place of the `start_time` and `start_timestamps` when no timestamps 
                              were provided in the original transcript input.
                          end_index:
                            type: integer
                            description: >
                              The end index of the `text`, with 0 being the start of the start of the transcript.
                              This is used in place of the `end_time` and `end_timestamps` when no timestamps 
                              were provided in the original transcript input.
                          transcript_segment:
                            type: array
                            description: A structured portion of the transcript associated with the summary bullet.
                            items:
                              type: object
                              properties:
                                text:
                                  type: string
                                  description: The utterance; the text of what the speaker said on the their turn.
                                speaker:
                                  type: string
                                  description: >
                                    The assigned letter of the speaker, from `A` through `Z`.
                                start_timestamp:
                                  type: integer
                                  description: >
                                    The timestamp of the moment the utterance began, in **milliseconds**, with 0 being the start
                                    of the conversation.
                                end_timestamp:
                                  type: integer
                                  description: >
                                    The timestamp of the moment the utterance ended, in **milliseconds**, with 0 being the start
                                    of the conversation.
                                start_time:
                                  type: string
                                  description: >
                                    The start time of the utterance, in human-readable format: **00:01:23**.
                                end_time:
                                  type: string
                                  description: >
                                    The end time of the utterance, in human-readable format: **00:04:56**.
                                start_index:
                                  type: integer
                                  description: >
                                    Used in place of the `start_time` and `start_timestamps` when no timestamps 
                                    were provided in the original transcript input.
                                end_index:
                                  type: integer
                                  description: >
                                    Used in place of the `end_time` and `end_timestamps` when no timestamps 
                                    were provided in the original transcript input.
    ShortSummary:
      allOf:
        - $ref: '#/components/schemas/BaseSummary'
        - type: object
          properties:
            summary:
              type: object
              description: A single-sentence summary. Works best on transcripts with over 5 minutes of speech.
              properties:
                short_summary:
                  type: string
                  description: >
                    In most cases, the Short Summary is a single sentence long. It's structured in the 
                    following format: _The speakers discussed Topic 1, Topic 2, and Topic 3_, whereas 
                    each topic corresponds to an important point that was discussed in the conversation. 
                    The number of Topics per each `short_summary` sentence can range from two to five.
    TranscriptFile:
      type: object
      properties:
        transcript:
          type: string
          description: |
            A **.txt** file formatted in the following manner (timestamps optional and can be placed anywhere on the line). `source` must be set to `generic`.
            ```
            [00:01:23 --> 00:01:25] Joe: This is an example of a generic transcript.
            [00:01:26 --> 00:01:27] Jill: Oh wow!
            ```
          format: binary
    AudioFile:
      type: object
      properties:
        audio_file:
          description: >
            Supported audio file formats include **flac**, **m4a**, **mp3**, **mpga**, **ogg**, and **wav**.
            `source` must be set to `audio`.
          type: string
          format: binary
    VTTFile:
      type: object
      properties:
        vtt_file:
          description: >
            Make sure your .vtt file is formatted correctly (you can use [this validator](https://quuz.org/webvtt/)).
          type: string
          format: binary
    InvalidOrderBy:
      type: object
      properties:
        error:
          type: string
          description: >
            When providing an `order_by` parameter, it should be one of: `time_started`, `-time_started`, 
            `time_completed`, `-time_completed`.
      example:
        error: "'order_by' should be one of: 'time_started', '-time_started', 'time_completed', '-time_completed'."
    WordcabTranscriptWrongSource:
      type: object
      properties:
        error:
          type: string
          description: >
            When providing a `transcript_id`, the `source` parameter needs to be set to `wordcab_transcript`.
      example:
        error: When providing a 'transcript_id', set the 'source' parameter to 'wordcab_transcript'.
    WordcabTranscriptNoTranscriptId:
      type: object
      properties:
        error:
          type: string
          description: >
            When using `wordcab_transcript` as your `source`, there must be a `transcript_id` parameter.
      example:
        error: When using 'wordcab_transcript' as your 'source', you must include a 'transcript_id'.
    TranscriptIdError:
      type: object
      properties:
        error:
          type: string
          description: >
            The `transcript_id` that was entered wasn't found, the transcript hasn't finished processing, 
            or there was an error in the transcription process.
      example:
        error: The 'transcript_id' you entered wasn't found, the transcript hasn't finished processing, or there was an error in the transcription process.
    InvalidSummaryType:
      type: object
      properties:
        error:
          type: string
          description: An invalid `summary_type` was entered.
      example:
        error: You entered an invalid 'summary_type'.
    InvalidSummaryLengths:
      type: object
      properties:
        error:
          type: string
          description: >
            `summary_lens` should be a number from 1-5, or a comma-separated 
            list of numbers 1-5 (ex. '1,3,5').
      example:
        error: The 'summary_lens' parameter should be a number from 1-5, or a comma-separated list of numbers 1-5 (ex. '1,3,5').
    FocusedSummaryNoTerms:
      type: object
      properties:
        error:
          type: string
          description: >
            You need to enter a comma-separated list of one or more `summary_terms` in order 
            to generate a focused summary.
      example:
        error: You need to enter a comma-separated list of one or more 'summary_terms' in order to generate a focused summary.
    MissingSignedURL:
      type: object
      properties:
        error:
          type: string
          description: When setting `source` as `signed_url`, you need to enter a valid AWS/GCP `signed_url`.
      example:
        error: When setting 'source' as 'signed_url', you need to enter a valid AWS/GCP 'signed_url'.
    MissingTranscript:
      type: object
      properties:
        error:
          type: string
          description: You need to provide an audio file, transcript file, JSON data, or a `transcript_id`.
      example:
        error: You need to provide an audio file, transcript file, JSON data, or a 'transcript_id'.
    InvalidJSONTranscriptStructure:
      type: object
      properties:
        error:
          type: string
          description: >
            You meed to correctly structure a JSON-formatted transcript: 
            ```
            {
              "transcript": [
                "SPEAKER A: This is an example.", 
                "SPEAKER B: This is another example."
              ]
            }
            ```
      example:
        error: "Please correctly structure your data: {'transcript': ['SPEAKER A: This is an example.', 'SPEAKER B: This is another example.']}"
    BlankTranscript:
      type: object
      properties:
        error:
          type: string
          description: The transcript appears to be blank.
      example:
        error: The transcript appears to be blank.
    ShortTranscript:
      type: object
      properties:
        error:
          type: string
          description: The transcript needs to have at least a minute of speech, or over 500 characters of text.
      example:
        error: Your transcript is too short, please ensure there is at least a minute of speech, or over 500 characters of text.
    JobNameNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A `job_name` parameter wasn't found.
      example:
        error: You need to enter a valid 'job_name'.
    JobNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A job with the specified `job_name` wasn't found.
      example:
        error: Sorry, that 'job_name' wasn't found.
    TranscriptIdNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A `transcript_id` parameter wasn't found.
      example:
        error: You need to enter a valid 'transcript_id'.
    TranscriptNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A transcript with the specified `transcript_id` wasn't found.
      example:
        error: Sorry, that 'transcript_id' wasn't found.
    SummaryIdNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A `summary_id` parameter wasn't found.
      example:
        error: You need to enter a valid 'summary_id'.
    SummaryNotFound:
      type: object
      properties:
        detail:
          type: string
          description: A summary with the specified `summary_id` wasn't found.
      example:
        error: Sorry, that 'summary_id' wasn't found.
    InvalidToken:
      type: object
      properties:
        detail:
          type: string
          description: An invalid Bearer Token or `apikey` parameter was entered.
      example:
        detail: Invalid token.
    SummarizeJob:
      type: object
      properties:
        job_status:
          type: string
          description: |
            The status of your job.
            * `Pending` - The job object has been created and is about to be queued
            * `ItemQueued` - The job has been queued
            * `Transcribing` - The input is being transcribed
            * `PreparingTranscript` - The transcript is being finalized
            * `TranscriptComplete` - The transcript is ready
            * `Summarizing` - The transcript is being summarized
            * `PreparingSummary` - The summary is being finalized
            * `SummaryComplete` - The summary is ready
            * `Deleted` - The job and its associated transcript and summaries have been deleted
            * `Error` - The job encountered an error
          enum: [Pending, ItemQueued, Transcribing, PreparingTranscript, TranscriptComplete, Summarizing,
            PreparingSummary, SummaryComplete, Deleted, Error]
        job_name:
          type: string
          description: Your job's id - keep this handy!
        transcript_id:
          type: string
          description: >
            The `transcript_id` of the associated Wordcab transcript object. You can use a single 
            `transcript_id` to generate multiple summaries or inspect the transcript itself with the 
            **/transcripts** endpoint.
        display_name:
          type: string
          description: The `display_name` that was initially set during job creation.
        time_started:
          type: string
          description: The ISO 8601 timestamp for when the job was initiated.
        settings:
          type: object
          description: >
            The settings that were initially set during job creation. For detailed descriptions
            of each, see the **/summarize** endpoint.
          properties:
            pipeline:
              type: string
            split_long_utterances:
              type: boolean
            ephemeral_data:
              type: boolean
            only_api:
              type: boolean
        summary_details:
          type: object
          description: >
            Details about the summary object that was created when the job was initiated, including the 
            `summary_id`, which you can use to retrieve the generated summary. For more detailed descriptions 
            of the other details, please see the **/summarize** endpoint.
          properties:
            summary_id:
              type: string
            summary_type:
              type: string
              enum: [narrative, short]
            summary_lens:
              type: string
              description: Only displayed if `summary_type` is `narrative`.
        source:
          type: string
          description: The `source` that was set during job creation.
          enum: [generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, otter, fireflies, sonix, descript]
      example:
        {
          "job_status": "SummaryComplete",
          "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
          "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
          "display_name": "My Awesome Job",
          "time_started": "2023-01-01T12:13:14.156789Z",
          "settings": {
            "pipeline": "transcript,summarize",
            "split_long_utterances": true,
            "ephemeral_data": false,
            "only_api": true
          },
          "summary_details": {
            "summary_id": "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6",
            "summary_type": "narrative",
            "summary_lens": "1,3,5"
          },
          "source": "generic",
          "tags": "customer_42,paid_users,vip_users",
          "metadata": {
            "uuid": "abc",
            "user_id": "123"
          }
        }
    ExtractJob:
      type: object
      properties:
        job_status:
          type: string
          description: |
            The status of your job.
            * `Pending` - The job object has been created and is about to be queued
            * `ItemQueued` - The job has been queued
            * `Extracting` - The extraction job is being processed
            * `PreparingExtraction` - The extraction job is being finalized
            * `ExtractionComplete` - The extraction job has been completed
            * `Deleted` - The job and its associated transcript and summaries have been deleted
            * `Error` - The job encountered an error
          enum: [Pending, ItemQueued, Extracting, PreparingExtraction, ExtractionComplete, Deleted, Error]
        job_name:
          type: string
          description: Your job's id - keep this handy!
        transcript_id:
          type: string
          description: >
            The `transcript_id` of the associated Wordcab transcript object. You can use a single 
            `transcript_id` to generate multiple summaries or inspect the transcript itself with the 
            **/transcripts** endpoint.
        display_name:
          type: string
          description: The `display_name` that was initially set during job creation.
        time_started:
          type: string
          description: The ISO 8601 timestamp for when the job was initiated.
        settings:
          type: object
          description: >
            The settings that were initially set during job creation. For detailed descriptions
            of each, see the **/extract** endpoint.
          properties:
            pipeline:
              type: string
            split_long_utterances:
              type: boolean
            ephemeral_data:
              type: boolean
            only_api:
              type: boolean
        source:
          type: string
          description: The `source` that was set during job creation.
          enum: [generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, otter, fireflies, sonix, descript]
      example:
        {
          "job_status": "ExtractionComplete",
          "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
          "transcript_id": "generic_transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
          "display_name": "my_data_extraction",
          "time_started": "2022-10-21T13:28:46.819385Z",
          "settings": {
            "pipeline": "questions_answers,topic_segments,emotions,speaker_talk_ratios",
            "split_long_utterances": false,
            "ephemeral_data": false,
            "only_api": false
          },
          "source": "generic",
          "tags": "customer_42,paid_users,vip_users",
          "metadata": {
            "uuid": "abc",
            "user_id": "123"
          },
          "time_completed": "2022-10-21T13:38:08.273653+00:00"
        }
paths:
  /me:
    get:
      tags:
        - Stats
      summary: Get Stats
      description: Retrieve account stats such as spend and request volume, by timestamp or tag.
      parameters:
        - name: min_created
          in: query
          required: false
          description: >
            **Default value:** set to a month prior to the current date.<br>
            **Format:** [ISO 8601](https://www.w3.org/TR/NOTE-datetime) or [Unix timestamps](https://www.unixtimestamp.com/)<br>
            **Default Timezone**: UTC<br>
            This parameter allows setting the minimum limit of the specified date range.
            If you don't specify a datetime, `min_created` will automatically be set to a month prior.<br>
            For example, if the current date is January 15, `min_created` will be set to December 15.
          schema:
            type: string
            default: ISO 8601 timestamp month prior
          example: "2021-12-15T00:00:00"
        - name: max_created
          in: query
          required: false
          description: >
            **Default value:** set to a month after the `min_created` parameter.
            **Format:** [ISO 8601](https://www.w3.org/TR/NOTE-datetime) or [Unix timestamps](https://www.unixtimestamp.com/)<br>
            **Default Timezone**: UTC<br>
            This parameter allows setting the maximum limit of the specified date range.
            If you don't specify a datetime, `max_created` will automatically be set to a month after `min_created`.<br>
            For example, if the current `min_created` is December 15, `max_created` will be set to January 15.
          schema:
            type: string
            default: ISO 8601 timestamp month after min_created
          example: "2022-01-15T00:00:00"
        - name: tags
          in: query
          required: false
          description: >
            A comma-separated string consisting of user-defined `tags`. Wordcab will filter stats to only account for 
            the specified tags.
          schema:
            type: string
          example: "customer_42,paid_users,vip_users"
      responses:
        '200':
          description: Successfully retrieved user stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_email:
                    type: string
                    description: The associated account email.
                  plan:
                    type: string
                    description: Your current subscription, free or paid plan.
                  monthly_request_limit:
                    type: string
                    description: >
                      Your monthly request limit (contact info@wordcab.com to raise it).
                  request_count:
                    type: integer
                    description: The number of successful requests during the specified date range.
                  minutes_summarized:
                    type: integer
                    description: The number of minutes summarized during the specified date range.
                  transcripts_summarized:
                    type: integer
                    description: The number of transcripts summarized during the specified date range.
                  metered_charge:
                    type: string
                    description: >
                      The metered charge for the specified date range. This takes into account all successful requests.
                  min_created:
                    type: string
                    description: >
                      The starting date range for the included stats - either specified by the user or set automatically.
                  max_created:
                    type: string
                    description: >
                      The ending date range for the included stats - either specified by the user or set automatically.
                  tags:
                    type: array
                    description: The user-specified tags used to filter the stats request.
                    items:
                      type: string
              example:
                {
                  "account_email": "hello@wordcab.com",
                  "plan": "Metered",
                  "monthly_request_limit": 10000,
                  "request_count": 1000,
                  "minutes_summarized": 1500,
                  "transcripts_summarized": 850,
                  "metered_charge": "$198.00",
                  "min_created": "2021-01-01T00:00:00",
                  "max_created": "2022-01-01T00:00:00",
                  "tags": ["customer_42", "paid_users", "vip_users"]
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'
  /extract:
    post:
      tags:
        - Extract
      summary: Start Extract
      description: >
        Initiate a new extract job with an audio file, text transcript, or JSON object.
        The job will be processed asynchronously and the response will contain a `job_name`.
      parameters:
        - name: X-Wordcab-Metadata-<Key>
          in: header
          required: false
          description: >
            A metadata object is composed of a key-value pair. To add metadata to your job, you must add 
            `X-Wordcab-Metadata-<Key>` headers to your **/extract** request, where `<Key>` is _a key of your choice_.<br>
            This way a metadata object with the key-value pairs you initially set will be saved to your job object.
            By convention, Wordcab will extract anything after `X-Wordcab-Metadata-` (in this case, `<Key>`), 
            make the string lowercase, and then convert any dashes to underscores.<br>
            For example, an `X-Wordcab-Metadata-UUID` key with a value of `"abc"`, and an `X-Wordcab-Metadata-User-ID` 
            key with a value of `"123"` will result in the following metadata object when retrieving your job:
            ```
            "metadata": {
                "uuid": "abc",
                "user_id": "123"
            }
            ```
          schema:
            type: string
          example: X-Wordcab-Metadata-UUID
        - name: source
          in: query
          required: true
          description: |
            Declare the source of the data for the Extraction job. 
            _📝 Note that some sources have different parameter requirements._
            * `generic` - Generic-format .txt and JSON transcripts
            * `audio` - For uploaded audio files
            * `wordcab_transcript` - Extraction job with one Wordcab transcript using a `transcript_id`
            * `signed_url` - _AWS_ or _GCP_ signed URLs
            * `assembly_ai` - Use the JSON array from AssemblyAI's `utterances` object as input
            * `deepgram` - Use the JSON array from Deepgram's `utterances` object as input
            * `rev_ai` - Use the JSON array from Rev.ai's `monologues` object as input
            * `vtt` - Either a .vtt file, or raw vtt text in the request body - Learn more about [proper vtt formatting](https://quuz.org/webvtt/). 
            _Note that speaker labels are required._
            * `otter` - Learn more about [Otter.ai transcript formatting](https://wordcab.com/blog/summarizing-your-otterai-transcripts-in-wordcab/)
            * `fireflies` - Learn more about [Fireflies.ai transcript formatting](https://wordcab.com/blog/summarizing-your-firefliesai-transcripts-in-wordcab/)
            * `sonix` - Learn more about [Sonix.ai transcript formatting](https://wordcab.com/blog/summarizing-your-sonixai-transcripts-in-wordcab/)
            * `descript` - Learn more about [Descript transcript formatting](https://wordcab.com/blog/how-to-summarize-descript-transcripts-in-wordcab/)
          schema:
            type: string
            default: generic
            enum: [generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, rev_ai, vtt, otter, fireflies, sonix, descript]
          example: generic
        - name: display_name
          in: query
          required: false
          description: |
            A human-readable name for your job. Not strictly required, but highly recommended.
          schema:
            type: string
          example: my_extract_job
        - name: pipeline
          in: query
          required: false
          description: >
            **Default value:** `questions_answers,topic_segments,emotions,speaker_talk_ratios`<br>
            A comma-separated list of actions to take upon initiating the job. You can specify any combination of the following:<br>
            * `questions_answers` - Detect question-answer pairs throughout the transcript.<br>
            * `topic_segments` - Extract topic segments from the transcript<br>
            * `emotions` - Extract emotions from the transcript<br>
            * `speaker_talk_ratios` - Details of the amount of time each speaker spoke
          schema:
            type: string
            default: questions_answers,topic_segments,emotions,speaker_talk_ratios
          example: questions_answers,topic_segments,emotions,speaker_talk_ratios
        - name: tags
          in: query
          required: false
          description: >
            A comma-separated string containing tags you'd like to attribute to your job. This is particularly helpful
            when you want to filter your jobs by a specific tag.
          schema:
            type: string
          example: "customer_42,paid_users,vip_users"
        - name: transcript_id
          in: query
          required: false
          description: >
            _Required when `source` is set to `wordcab_transcript`._<br>
            Represents the id of a processed Wordcab transcript.
          schema:
            type: string
          example: transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W
        - name: signed_url
          in: query
          required: false
          description: >
            _Required when `source` is set to `signed_url`._<br>
            An _AWS_ or _GCP_ signed URL that points to an audio file.
          schema:
            type: string
          example: "https://s3.us-east-2.amazonaws.com/example-bucket/sales-call.mp3?X-Amz-Security-Token=XYZ…"
        - name: ephemeral_data
          in: query
          required: false
          description: >
            <span style="color:red;">Warning</span>: requires 
            <a href="https://wordcab.com/account/webhook-portal/" target="_blank">webhooks to be enabled</a>.
            If set to `true`, your webhooks will receive all processed data simultaneously instead of only a job reference.
            Ephemeral data provides a convenient, automatic way of removing sensitive data from Wordcab servers.<br>
            📝 Note that enabling `ephemeral_data` wipes all sensitive data tied to a particular job.
            You will not be able to retrieve a finished job via polling, nor will you be able to reuse any 
            `transcript_id` or `summary_id` tied to the removed job.
          schema:
            type: boolean
            default: false
          example: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TranscriptFile"
                - $ref: "#/components/schemas/AudioFile"
                - $ref: "#/components/schemas/VTTFile"
          # application/json:
          #   schema:
          #     $ref: "#/components/schemas/jsonBody"
      responses:
        '201':
          description: Successfully created a job
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_name:
                    type: string
                    description: You can use the newly generated `job_name` to poll the **/jobs** endpoint.
              example:
                {
                  "job_name": "job_UGWCThBPanz7k6IrTkGbg16PcJLbFee6"
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/WordcabTranscriptWrongSource"
                  - $ref: "#/components/schemas/WordcabTranscriptNoTranscriptId"
                  - $ref: "#/components/schemas/TranscriptIdError"
                  - $ref: "#/components/schemas/InvalidSummaryType"
                  - $ref: "#/components/schemas/InvalidSummaryLengths"
                  - $ref: "#/components/schemas/MissingTranscript"
                  - $ref: "#/components/schemas/InvalidJSONTranscriptStructure"
                  - $ref: "#/components/schemas/BlankTranscript"
                  - $ref: "#/components/schemas/ShortTranscript"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'
  /summarize:
    post:
      tags:
        - Summarize
      summary: Start Summary
      description: >
        Initiate a new summary job with an audio file, text transcript, or JSON object. 
        The job will be processed asynchronously and the response will contain a `job_name`.
      parameters:
        - name: X-Wordcab-Metadata-<Key>
          in: header
          required: false
          description: >
            A metadata object is composed of a key-value pair. To add metadata to your job, you must add 
            `X-Wordcab-Metadata-<Key>` headers to your **/summarize** request, where `<Key>` is _a key of your choice_.<br>
            This way a metadata object with the key-value pairs you initially set will be saved to your job object.
            By convention, Wordcab will extract anything after `X-Wordcab-Metadata-` (in this case, `<Key>`), 
            make the string lowercase, and then convert any dashes to underscores.<br>
            For example, an `X-Wordcab-Metadata-UUID` key with a value of `"abc"`, and an `X-Wordcab-Metadata-User-ID` 
            key with a value of `"123"` will result in the following metadata object when retrieving your job:
            ```
            "metadata": {
                "uuid": "abc",
                "user_id": "123"
            }
            ```
          schema:
            type: string
          example: X-Wordcab-Metadata-UUID
        - name: source
          in: query
          required: true
          description: |
            Declare the source of the data for the Summarization job. 
            _📝 Note that some sources have different parameter requirements._
            * `generic` - Generic-format .txt and JSON transcripts
            * `audio` - For uploaded audio files
            * `wordcab_transcript` - Summarization job with one Wordcab transcript using a `transcript_id`
            * `signed_url` - _AWS_ or _GCP_ signed URLs
            * `assembly_ai` - Use the JSON array from AssemblyAI's `utterances` object as input
            * `deepgram` - Use the JSON array from Deepgram's `utterances` object as input
            * `rev_ai` - Use the JSON array from Rev.ai's `monologues` object as input
            * `vtt` - Either a .vtt file, or raw vtt text in the request body - Learn more about [proper vtt formatting](https://quuz.org/webvtt/). 
            _Note that speaker labels are required._
            * `otter` - Learn more about [Otter.ai transcript formatting](https://wordcab.com/blog/summarizing-your-otterai-transcripts-in-wordcab/)
            * `fireflies` - Learn more about [Fireflies.ai transcript formatting](https://wordcab.com/blog/summarizing-your-firefliesai-transcripts-in-wordcab/)
            * `sonix` - Learn more about [Sonix.ai transcript formatting](https://wordcab.com/blog/summarizing-your-sonixai-transcripts-in-wordcab/)
            * `descript` - Learn more about [Descript transcript formatting](https://wordcab.com/blog/how-to-summarize-descript-transcripts-in-wordcab/)
          schema:
            type: string
            default: generic
            enum: [generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, rev_ai, vtt, otter, fireflies, sonix, descript]
          example: generic
        - name: display_name
          in: query
          required: false
          description: |
            A human-readable name for your job. Not strictly required, but highly recommended.
          schema:
            type: string
          example: my_summary_job
        - name: summary_type
          in: query
          required: true
          description: |
            **Default value:** `narrative`
            The type of summary you want to generate.
            * `narrative` - Wordcab's default summary type, which aims to produce a detailed, bullet-point style summary.
            * `reason_conclusion` - A "reason" summary describing the purpose of the call, and a "conclusion" summary describing the outcome.
            * `conversational` - A summary that suits internal meetings and sales calls when you don't need an exact play-by-play of the events. Consider choosing `narrative` if you do.
            * `no_speaker` - Similar to the `conversational` summary, without referencing any speakers and going straight to the important events in a conversation.
          schema:
            type: string
            default: narrative
            enum: [ narrative, reason_conclusion, conversational, no_speaker ]
          example: narrative
        - name: summary_lens
          in: query
          required: false
          description: >
            _Required when `summary_type` is set to `narrative`_<br>
            A comma-separated string of numbers `1` through `5`. `1` corresponds to the shortest
            summary length, and `5` to the longest.<br>
            _📝 Note that if you specify more than one number, you will receive multiple summaries._
          schema:
            type: string
            default: "3"
          example: "1,3,5"
        - name: transcript_id
          in: query
          required: false
          description: >
            _Required when `source` is set to `wordcab_transcript`._<br>
            Represents the id of a processed Wordcab transcript.
          schema:
            type: string
          example: transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W
        - name: signed_url
          in: query
          required: false
          description: >
            _Required when `source` is set to `signed_url`._<br>
            An _AWS_ or _GCP_ signed URL that points to an audio file.
          schema:
            type: string
          example: "https://s3.us-east-2.amazonaws.com/example-bucket/sales-call.mp3?X-Amz-Security-Token=XYZ…"
        - name: tags
          in: query
          required: false
          description: >
            A comma-separated string containing tags you'd like to attribute to your job. This is particularly helpful
            when you want to see summarized minutes and request counts for a particular subset of customers.
          schema:
            type: string
          example: "customer_42,paid_users,vip_users"
        - name: split_long_utterances
          in: query
          required: false
          description: >
            Splits up overly long speaker utterances. This results in generally more accurate but slightly longer summaries.
          schema:
            type: boolean
            default: false
          example: false
        - name: pipeline
          in: query
          required: false
          description: >
            **Default value:** `transcribe,summarize`<br>
            A comma-separated list of actions to take upon initiating the job. Generally, there is no need to 
            change this, unless you use `transcribe` on its own - this will generate a Wordcab transcript, and
            you can use the resulting `transcript_id` for further downstream tasks.
          schema:
            type: string
            default: transcribe,summarize
          example: transcribe,summarize
        - name: ephemeral_data
          in: query
          required: false
          description: >
            <span style="color:red;">Warning</span>: requires 
            <a href="https://wordcab.com/account/webhook-portal/" target="_blank">webhooks to be enabled</a>.
            If set to `true`, your webhooks will receive all processed data simultaneously instead of only a job reference.
            Ephemeral data provides a convenient, automatic way of removing sensitive data from Wordcab servers.<br>
            📝 Note that enabling `ephemeral_data` wipes all sensitive data tied to a particular job.
            You will not be able to retrieve a finished job via polling, nor will you be able to reuse any 
            `transcript_id` or `summary_id` tied to the removed job.
          schema:
            type: boolean
            default: false
          example: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TranscriptFile"
                - $ref: "#/components/schemas/AudioFile"
                - $ref: "#/components/schemas/VTTFile"
          # application/json:
          #   schema:
          #     $ref: "#/components/schemas/jsonBody"
#          text/plain:
#            schema:
#              $ref: "#/components/schemas/textBody"
      responses:
        '201':
          description: Successfully created a job
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_name:
                    type: string
                    description: You can use the newly generated `job_name` to poll the **/jobs** endpoint.
              example:
                {
                  "job_name": "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6"
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/WordcabTranscriptWrongSource"
                  - $ref: "#/components/schemas/WordcabTranscriptNoTranscriptId"
                  - $ref: "#/components/schemas/TranscriptIdError"
                  - $ref: "#/components/schemas/InvalidSummaryType"
                  - $ref: "#/components/schemas/InvalidSummaryLengths"
                  #- $ref: '#/components/schemas/FocusedSummaryNoTerms'
                  - $ref: "#/components/schemas/MissingSignedURL"
                  - $ref: "#/components/schemas/MissingTranscript"
                  - $ref: "#/components/schemas/InvalidJSONTranscriptStructure"
                  - $ref: "#/components/schemas/BlankTranscript"
                  - $ref: "#/components/schemas/ShortTranscript"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /jobs:
    get:
      tags:
        - Jobs
      summary: List Jobs
      description: Retrieve a list of jobs.
      parameters:
        - name: page_size
          in: query
          required: false
          description: >
            **Default value:** `100`<br>
            The number of jobs you'd like to see per response. If there are more jobs than `page_size`, 
            you'll be provided a link to navigate to the next `page`.
          schema:
            type: integer
            default: 100
          example: 100
        - name: order_by
          in: query
          required: false
          description: >
            **Default value:** `-time_started` (descending order, based on the time the job was created)<br>
            The list order of the jobs. You can use `+` or `-` to indicate ascending or descending order, respectively.<br>
            Can be `display_name`, `job_name`, `job_status`, `source`, `summary_details`, `time_started`, 
            `time_completed` or `transcript_id`.
          schema:
            type: string
            default: -time_started
          example: -time_started
      responses:
        '200':
          description: Successfully retrieved a list of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_size:
                    type: integer
                    description: The number of `pages` returned.
                  next:
                    type: string
                    description: The request URL for the previous page of results.
                  previous:
                    type: string
                    description: The request URL for the next page of results.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        job_status:
                          type: string
                          description: |
                            The status of your job.
                            * `Pending` - The job object has been created and is about to be queued
                            * `ItemQueued` - The job has been queued
                            * `Transcribing` - The input is being transcribed
                            * `PreparingTranscript` - The transcript is being finalized
                            * `TranscriptComplete` - The transcript is ready
                            * `Summarizing` - The transcript is being summarized
                            * `PreparingSummary` - The summary is being finalized
                            * `SummaryComplete` - The summary is ready
                            * `Deleted` - The job and its associated transcript and summaries have been deleted
                            * `Error` - The job encountered an error
                          enum: [ Pending, ItemQueued, Transcribing, PreparingTranscript, TranscriptComplete, Summarizing,
                                  PreparingSummary, SummaryComplete, Deleted, Error ]
                        job_name:
                          type: string
                          description: Your job's id - keep this handy!
                        display_name:
                          type: string
                          description: The `display_name` that was initially set during job creation.
                        transcript_id:
                          type: string
                          description: >
                            The `transcript_id` of the associated Wordcab transcript object. You can use a single 
                            `transcript_id` to generate multiple summaries or inspect the transcript itself with the 
                            **/transcripts** endpoint.
                        summary_details:
                          type: object
                          description: >
                            Details about the summary object that was created when the job was initiated, including the 
                            `summary_id`, which you can use to retrieve the generated summary.
                          properties:
                            summary_id:
                              type: string
                            summary_type:
                              type: string
                              enum: [ narrative, short ]
                        source:
                          type: string
                          description: The `source` that was set during job creation.
                          enum: [ generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, otter, fireflies, sonix, descript ]
                        time_started:
                          type: string
                          description: The ISO 8601 timestamp for when the job was initiated.
                        time_completed:
                          type: string
                          description: The ISO 8601 timestamp for when the job was completed.
                example:
                  {
                    "page_count": 10,
                    "next": "https://wordcab.com/api/v1/jobs/?page=2",
                    "results": [
                      {
                        "job_status": "SummaryComplete",
                        "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
                        "display_name": "My Awesome Job",
                        "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
                        "summary_details": {
                          "summary_id": "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6",
                          "summary_type": "narrative",
                        },
                        "source": "generic",
                        "time_started": "2023-01-01T12:13:14.156789Z",
                        "time_completed": "2023-01-01T12:15:18.156789Z"
                      }
                    ]
                  }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidOrderBy'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /jobs/{job_name}:
    get:
      tags:
        - Jobs
      summary: Retrieve Job
      description: Retrieve a job using the `job_name` generated during job creation.
      parameters:
        - name: job_name
          in: path
          required: true
          description: The `job_name` of the job you'd like to retrieve.
          schema:
            type: string
          example: job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3
      responses:
        '200':
          description: Successfully retrieved a job
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ExtractJob'
                  - $ref: '#/components/schemas/SummarizeJob'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/JobNameNotFound'
                  - $ref: '#/components/schemas/JobNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'
    delete:
      tags:
        - Jobs
      summary: Delete Job
      description: >
        Delete a job using the `job_name` generated during job creation. Note that this also deletes any associated
        transcript and summary. If you are using an associated `transcript_id` in multiple jobs, these will be affected.
      parameters:
        - name: job_name
          in: path
          required: true
          description: The `job_name` of the job you'd like to delete.
          schema:
            type: string
          example: job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3
      responses:
        '200':
          description: Successfully deleted a job
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_name:
                    type: string
                    description: The job id that was deleted.
              example:
                {
                  "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/JobNameNotFound'
                  - $ref: '#/components/schemas/JobNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /transcripts:
    get:
      tags:
        - Transcripts
      summary: List Transcripts
      description: Retrieve a list of transcripts.
      parameters:
        - name: page_size
          in: query
          required: false
          description: >
            The number of transcripts you'd like to see per response. If there are more transcripts than `page_size`, 
            you'll be provided a link to navigate to the next `page`.
          schema:
            type: integer
            default: 100
          example: 100
      responses:
        '200':
          description: Successfully retrieved a list of transcripts
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_size:
                    type: integer
                    description: The number of `pages` returned.
                  next:
                    type: string
                    description: The request URL for the previous page of results.
                  previous:
                    type: string
                    description: The request URL for the next page of results.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        transcript_id:
                          type: string
                          description: The id of the transcript object.
                          job_id_set:
                            type: array
                            description: >
                              A set of `job_names` associated with the transcript. There can be more than one 
                              `job_name` because a `transcript_id` can be used to generate multiple summaries,
                              and each summary process is a new job.
                            items:
                              type: string
                          summary_id_set:
                            type: array
                            description: >
                              A set of `summary_ids` associated with the transcript. There can be more than one 
                              `summary_id` because a `transcript_id` can be used to generate multiple summaries.
                            items:
                              type: string
              example:
                {
                  "page_count": 10,
                  "next": "https://wordcab.com/api/v1/transcripts/?page=2",
                  "results": [
                    {
                      "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
                      "job_id_set": [
                        "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
                        "job_ur3tlDQMBDqED2Vr7TK3a1oeWo39jj9f"
                      ],
                      "summary_id_set": [
                        "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6",
                        "short_summary_CmUhlopIyLo3Y5L2BglboM1c6Jm20isP"
                      ]
                    }
                  ]
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /transcripts/{transcript_id}:
    get:
      tags:
        - Transcripts
      summary: Retrieve Transcript
      description: Retrieve a transcript using the `transcript_id` generated during job creation.
      parameters:
        - name: transcript_id
          in: path
          required: true
          description: The `transcript_id` of the transcript you'd like to retrieve.
          schema:
            type: string
          example: transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W
      responses:
        '200':
          description: Successfully retrieved a transcript object
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript_id:
                    type: string
                    description: The id of the transcript object.
                  job_id_set:
                    type: array
                    description: >
                      A set of `job_names` associated with the transcript. There can be more than one 
                      `job_name` because a `transcript_id` can be used to generate multiple summaries,
                      and each summary process is a new job.
                    items:
                      type: string
                  summary_id_set:
                    type: array
                    description: >
                      A set of `summary_ids` associated with the transcript. There can be more than one 
                      `summary_id` because a `transcript_id` can be used to generate multiple summaries.
                    items:
                      type: string
                  transcript:
                    type: array
                    description: >
                      A structured transcript, in the form of an array of objects representing 
                      the turn-by-turn of what was said. Each object has the `text` of what was said,
                      the `speaker` who said it, and either the `start_timestamp` and `end_timestamp`
                      (and the human-readable `start_time` and `end_time`), or, if no timestamps were
                      provided during input, a `start_index` and `end_index`.
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          description: The utterance; the text of what the speaker said on their turn.
                        speaker:
                          type: string
                          description: >
                            The assigned letter of the speaker, from `A` through `Z`. This is used as a key in 
                            the `speaker_map` object, with the value being the associated label.
                        start_timestamp:
                          type: integer
                          description: >
                            The timestamp of the moment the utterance began, in **milliseconds**, with 0 being the start
                            of the conversation. Only present if timestamps were included in the transcript that was
                            used as input for the job, or if the job input was an audio file.
                        end_timestamp:
                          type: integer
                          description: >
                            The timestamp of the moment the utterance ended, in **milliseconds**, with 0 being the start
                            of the conversation. Only present if timestamps were included in the transcript that was
                            used as input for the associated job, or if the job input was an audio file.
                        start_time:
                          type: string
                          description: >
                            The start time of the utterance, in human-readable format: **00:01:23**. Only present if 
                            timestamps were included in the transcript that was used as input for the associated job, 
                            or if the job input was an audio file.
                        end_time:
                          type: string
                          description: >
                            The end time of the utterance, in human-readable format: **00:04:56**. Only present if 
                            timestamps were included in the transcript that was used as input for the associated job, 
                            or if the job input was an audio file.
                        start_index:
                          type: integer
                          description: >
                            The start index of the `text`, with 0 being the start of the transcript.
                            This is used in place of the `start_time` and `start_timestamps` when no timestamps 
                            were provided in the original transcript input.
                        end_index:
                          type: integer
                          description: >
                            The end index of the `text`, with 0 being the start of the transcript.
                            This is used in place of the `end_time` and `end_timestamps` when no timestamps 
                            were provided in the original transcript input.
                        topic_change:
                          type: integer
                          description: >
                            A value of 0 or 1, indicates the likelihood that the topic of the conversation
                            changed on this turn.<br>
                            * `0`: The topic did not change on this turn.<br>
                            * `1`: The topic changed on this turn.
                        detected_emotion:
                          type: string
                          description: >
                            The detected emotion of the speaker on this turn. Possible values are:
                            * `anger`
                            * `disgust`
                            * `fear`
                            * `joy`
                            * `neutral`
                            * `sadness`
                            * `surprise`
                  speaker_map:
                    type: object
                    patternProperties:
                      '^[A-Z]$':
                        type: string
                        pattern: '^[A-Z]$'
                        description: >
                          The key can be any letter `A` through `Z`. This key corresponds to the `speaker` value
                          in the `transcript`. The value is the assigned speaker label, which defaults to 
                          **SPEAKER [A-Z]** (for example, 'SPEAKER B'). You can use the `speaker_map` to quickly 
                          insert appropriate speaker labels into the transcript, and replace speaker labels in the 
                          associated summaries.
                  questions_answers:
                    type: array
                    description: >
                      A structured set of questions and associated answers, in the form of an array of objects. 
                      Each object has the `question` and `answer` text, and the `question_speaker` and `answer_speaker`,
                      which are represented by their assigned letter (from `A` through `Z`).
                    items:
                      type: object
                      properties:
                        answer:
                          type: string
                          description: The answer text.
                        question:
                          type: string
                          description: The question text.
                        answer_speaker:
                          type: string
                          description: >
                            The assigned letter of the speaker who answered the question, from `A` through `Z`. This is 
                            used as a key in the `speaker_map` object, with the value being the associated label.
                        question_speaker:
                          type: string
                          description: >
                            The assigned letter of the speaker who asked the question, from `A` through `Z`. This is 
                            used as a key in the `speaker_map` object, with the value being the associated label.
                  speaker_talk_ratios:
                    type: array
                    description: >
                      A structured set of speaker talk ratios, in the form of an array of objects. Each object has the 
                      `speaker` and `talk_ratio` values, which are represented by their assigned letter (from `A` through `Z`).
                    items:
                      type: object
                      properties:
                        speaker:
                          type: string
                          description: >
                            The assigned letter of the speaker, from `A` through `Z`. This is used as a key in the 
                            `speaker_map` object, with the value being the associated label.
                        talk_ratio:
                          type: number
                          description: >
                            The ratio of the total talk time of the speaker to the total talk time of all speakers in percent.
              example:
                {
                  "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
                  "job_id_set": [
                    "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
                    "job_ur3tlDQMBDqED2Vr7TK3a1oeWo39jj9f"
                  ],
                  "summary_id_set": [
                    "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6",
                    "short_summary_CmUhlopIyLo3Y5L2BglboM1c6Jm20isP"
                  ],
                  "transcript": [
                    {
                      "text": "What is this?",
                      "speaker": "A",
                      "start_timestamp": 1000,
                      "end_timestamp": 5000,
                      "start_time": "00:00:01",
                      "end_time":"00:00:05",
                      "topic_change": 0,
                      "detected_emotion": "surprise"
                    },
                    {
                      "text": "This is an example of a generic transcript.",
                      "speaker": "B",
                      "start_timestamp": 6000,
                      "end_timestamp": 16000,
                      "start_time": "00:00:06",
                      "end_time":"00:00:16",
                      "topic_change": 0,
                      "detected_emotion": "neutral"
                    },
                    {
                      "text": "Oh wow!",
                      "speaker": "A",
                      "start_timestamp": 17000,
                      "end_timestamp": 21000,
                      "start_time": "00:00:17",
                      "end_time":"00:00:21",
                      "topic_change": 0,
                      "detected_emotion": "surprise"
                    }
                  ],
                  "speaker_map": {
                    "A": "Joe",
                    "B": "Jill"
                  },
                  "questions_answers": [
                    {
                      "question": "What is this?",
                      "answer": "This is an example of a generic transcript.",
                      "question_speaker": "A",
                      "answer_speaker": "B"
                    }
                  ],
                  "speaker_talk_ratios": {
                    "A": "48.98%",
                    "B": "51.02%"
                  }
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TranscriptIdNotFound'
                  - $ref: '#/components/schemas/TranscriptNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'
    patch:
      tags:
        - Transcripts
      summary: Change Speaker Labels
      description: >
        Modify a transcript's speaker labels. These changes will propagate to every associated summary object.
      parameters:
        - name: transcript_id
          in: path
          required: true
          description: The `transcript_id` of the transcript you'd like to modify.
          schema:
            type: string
          example: transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                speaker_map:
                  type: object
                  description: >
                    The new speaker map you wish to set. Each letter `A` through `Z` is associated with a speaker
                    label. The new speaker map will propagate the new speaker labels to every summary associated
                    with the transcript object. The speaker labels in each summary will reflect the new speaker map.<br>
                    ```
                    {
                      "speaker_map": {
                        "A": "Joe",
                        "B": "Jill"
                      }
                    }
                    ```
                  patternProperties:
                    '^[A-Z]$':
                      type: string
                      pattern: '^[A-Z]$'
      responses:
        '200':
          description: Successfully modified a transcript object
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript_id:
                    type: string
                    description: The id of the transcript object.
                  speaker_map:
                    type: object
                    description: The new speaker map that was set.
                    patternProperties:
                      '^[A-Z]$':
                        type: string
                        pattern: '^[A-Z]$'
              example:
                {
                  "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
                  "speaker_map": {
                    "A": "Joe",
                    "B": "Jill"
                  }
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TranscriptIdNotFound'
                  - $ref: '#/components/schemas/TranscriptNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /summaries:
    get:
      tags:
        - Summaries
      summary: List Summaries
      description: Retrieve a list of summaries.
      parameters:
        - name: page_size
          in: query
          required: false
          description: >
            **Default value:** `100`<br>
            The number of summaries you'd like to see per response. If there are more summaries than `page_size`, 
            you'll be provided a link to navigate to the next `page`.
          schema:
            type: integer
            default: 100
          example: 100
      responses:
        '200':
          description: Successfully retrieved a list of summaries
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_size:
                    type: integer
                    description: The number of `pages` returned.
                  next:
                    type: string
                    description: The request URL for the previous page of results.
                  previous:
                    type: string
                    description: The request URL for the next page of results.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        job_status:
                          type: string
                          description: |
                            The `status` of the associated job.
                            * `Pending` - The job object has been created and is about to be queued
                            * `ItemQueued` - The job has been queued
                            * `Transcribing` - The input is being transcribed
                            * `PreparingTranscript` - The transcript is being finalized
                            * `TranscriptComplete` - The transcript is ready
                            * `Summarizing` - The transcript is being summarized
                            * `PreparingSummary` - The summary is being finalized
                            * `SummaryComplete` - The summary is ready
                            * `Deleted` - The job and its associated transcript and summaries have been deleted
                            * `Error` - The job encountered an error
                          enum: [ Pending, ItemQueued, Transcribing, PreparingTranscript, TranscriptComplete, Summarizing,
                                  PreparingSummary, SummaryComplete, Deleted, Error ]
                        job_name:
                          type: string
                          description: The `job_name` of the associated job.
                        summary_id:
                          type: string
                          description: The id of the summary object.
                        transcript_id:
                          type: string
                          description: The id of the associated transcript.
                        summary_type:
                          type: string
                          description: The type of summary that was generated.
                          enum: [ narrative, short ]
                        source:
                          type: string
                          description: The `source` that was set during the associated job's creation.
                          enum: [ generic, audio, wordcab_transcript, signed_url, assembly_ai, deepgram, otter, fireflies, sonix, descript ]
                        time_started:
                          type: string
                          description: The ISO 8601 timestamp for when the associated job was initiated.
                        time_completed:
                          type: string
                          description: The ISO 8601 timestamp for when the associated job was completed.
              example:
                {
                  "page_count": 10,
                  "next": "https://wordcab.com/api/v1/summaries/?page=2",
                  "results": [
                    {
                      "job_status": "SummaryComplete",
                      "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
                      "transcript_id": "transcript_KU3IU70e4az3WiJhWsOQI7WPXTRweo8W",
                      "summary_id": "narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6",
                      "summary_type": "narrative",
                      "source": "generic",
                      "time_started": "2023-01-01T12:13:14.156789Z",
                      "time_completed": "2023-01-01T12:15:18.156789Z"
                    }
                  ]
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

  /summaries/{summary_id}:
    get:
      tags:
        - Summaries
      summary: Retrieve Summary
      description: Retrieve a summary using the `summary_id` generated during job creation.
      parameters:
        - name: summary_id
          in: path
          required: true
          description: The `summary_id` of the summary you'd like to retrieve.
          schema:
            type: string
          example: narrative_summary_UGWCThBPanz7k6IrTkGbg16PcJLbFee6
      responses:
        '200':
          description: Successfully retrieved a summary object
          content:
            application/json:
              schema:
                discriminator:
                  propertyName: summary_type
                  mapping:
                    narrative: '#/components/schemas/NarrativeSummary'
                    short: '#/components/schemas/ShortSummary'
                anyOf:
                  - $ref: '#/components/schemas/NarrativeSummary'
                  - $ref: '#/components/schemas/ShortSummary'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SummaryIdNotFound'
                  - $ref: '#/components/schemas/SummaryNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidToken'

#  /delete/:
#    post:
#      tags:
#        - Delete
#      summary: Delete Job
#      description: Delete a job using the `job_name` generated during job creation.
#      parameters:
#        - name: job_name
#          in: query
#          required: true
#          description: The `job_name` of the job you'd like to delete.
#          schema:
#            type: string
#          example: job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3
#      responses:
#        '200':
#          description: Successfully deleted a job.
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  job_name:
#                    type: string
#                    description: The job id that was deleted.
#                example:
#                  {
#                    "job_name": "job_hDGRNL9yOf5RfpURCNLNJqhFrnBAtDc3",
#                  }
#        '400':
#          description: Bad request
#          content:
#            application/json:
#              schema:
#                oneOf:
#                  - $ref: '#/components/schemas/JobNameNotFound'
#                  - $ref: '#/components/schemas/JobNotFound'
#        '401':
#          description: Unauthorized
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/InvalidToken'
